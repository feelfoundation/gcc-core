"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BigNum = require("@feelhq/bignum");
const constants_1 = require("../constants");
const validation_1 = require("./validation");
const BASE_10 = 10;
const FEEL_MAX_DECIMAL_POINTS = 8;
const getDecimalPlaces = (amount) => (amount.split('.')[1] || '').length;
exports.convertFellowsToF39 = (fellowsAmount) => {
    if (typeof fellowsAmount !== 'string') {
        throw new Error('Cannot convert non-string amount');
    }
    if (getDecimalPlaces(fellowsAmount)) {
        throw new Error('Fellows amount should not have decimal points');
    }
    const fellowsAmountBigNum = new BigNum(fellowsAmount);
    if (validation_1.isGreaterThanMaxTransactionAmount(fellowsAmountBigNum)) {
        throw new Error('Fellows amount out of range');
    }
    const f39AmountBigNum = fellowsAmountBigNum.div(constants_1.FIXED_POINT);
    return f39AmountBigNum.toString(BASE_10);
};
exports.convertF39ToFellows = (f39Amount) => {
    if (typeof f39Amount !== 'string') {
        throw new Error('Cannot convert non-string amount');
    }
    if (getDecimalPlaces(f39Amount) > FEEL_MAX_DECIMAL_POINTS) {
        throw new Error('F39 amount has too many decimal points');
    }
    const f39AmountBigNum = new BigNum(f39Amount);
    const fellowsAmountBigNum = f39AmountBigNum.mul(constants_1.FIXED_POINT);
    if (validation_1.isGreaterThanMaxTransactionAmount(fellowsAmountBigNum)) {
        throw new Error('F39 amount out of range');
    }
    return fellowsAmountBigNum.toString();
};
exports.prependPlusToPublicKeys = (publicKeys) => publicKeys.map(publicKey => `+${publicKey}`);
exports.prependMinusToPublicKeys = (publicKeys) => publicKeys.map(publicKey => `-${publicKey}`);
//# sourceMappingURL=format.js.map